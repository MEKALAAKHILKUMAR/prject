import json
import string
import random
from json import JSONDecodeError

def Register(type,member_json_file,admin_json_file,Full_Name,Address,Email,Password):
    '''Register Function || Return True if registered successfully else False'''
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='member':
        f=open(member_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    else:
        return False

def Login(type,members_json_file,admin_json_file,Email,Password):
    '''Login Functionality || Return True if successfully logged in else False'''
    d=0
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
    else:
        f=open(members_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Email"]==Email and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def Create_Product(owner,product_json_file,product_ID,product_name,manufacturer_name,price,discount,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    product_data = {
        'owner': owner,
        'product_ID': product_ID,
        'product_name': product_name,
        'manufacturer_name': manufacturer_name,
        'price': price,
        'discount': discount,
        'total_stock_available': total_stock_available
    }
    
    with open(product_json_file, 'r+') as f:
        product_json_data = json.load(f)
    
    if product_ID in product_json_data:
        print('Product with ID {} already exists!'.format(product_ID))
        return False
    product_json_data[product_ID] = product_data
    with open(product_json_file, 'w') as f:
        json.dump(product_json_data, f)
    
    print('Product created successfully!')
    return True

def Read_Products(owner,product_json_file):
    '''Reading Products created by the admin(owner)'''
    products=[]
    f=open(product_json_file,'r+')
    content=json.load(f)
    for i in range(len(content)):
        if content[i]["owner"]==owner:
            products.append(content[i])
            
    f.close()
    return products
            

def Read_Product_By_ID(product_json_file,product_ID,Details):
    '''Reading product by ID'''
    with open(product_json_file, 'r') as f:
        products = json.load(f)
    
    if product_ID not in products:
        print(f"Product with ID {product_ID} does not exist.")
        return None
    
    product = products[product_ID]
    if Details == 'all':
        return product
    elif Details in product:
        return product[Details]
    else:
        print(f"Invalid details requested: {Details}")
        return None

def Update_Product(product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''

    f=open(product_json_file,'r+')
    content=json.load(f)
    for i in range(len(content)):
        if content[i]["product_ID"]==product_ID:
            
            try:
                a=content[i][detail_to_be_updated]
            except KeyError:
                return False
            
            content[i][detail_to_be_updated]=new_value
            f.seek(0)
            f.truncate()
            json.load(content,f)
            f.close()
            return True
    f.close()
    return False
    
    
def Delete_Product(product_json_file,product_ID):
    '''Deleting Product || Return True if successfully deleted else False'''
    
    f=open(product_json_file,'r+')
    content=json.load(f)
    for i in range(len(content)):
        if content[i]["product_ID"]==product_ID:
            del content[i]
            f.seek(0)
            f.truncate()
            json.dump(content,f)
            f.close()
            return True
    f.close()
    return False

def Update_Member(member_json_file,name,detail_to_be_updated,new_value):
    '''Updating Member Details || Return True if successfully updated else False'''
    f=open(member_json_file,'r+')
    content=json.load(f)
    for i in range(len(content)):
        if content[i]["name"]==name:
            
            try:
                a=content[i][detail_to_be_updated]
            except KeyError:
                return False
            
            content[i][detail_to_be_updated]=new_value
            f.seek(0)
            f.truncate()
            json.load(content,f)
            f.close()
            return True
    f.close()
    return False
    
    
    

def Place_Order(order_json_file,ordered_by,delivery_address,product_json_file,product_ID,Quantity,Order_ID):
    '''Placing Order, Calculate the Price after discount and Total cost of the order || Return True if order placed successfully else False'''
    with open(product_json_file, 'r') as f:
        products = json.load(f)
    
    if product_ID not in products:
        print(f"Product with ID {product_ID} does not exist.")
        return False
    
    product = products[product_ID]
    price = product['price']
    discount = product['discount']
    discounted_price = price * (1 - discount/100)
    total_cost = discounted_price * Quantity
    
    order = {
        'ordered_by': ordered_by,
        'delivery_address': delivery_address,
        'product_ID': product_ID,
        'product_name': product['product_name'],
        'quantity': Quantity,
        'price': discounted_price,
        'total_cost': total_cost
    }
    
    try:
        with open(order_json_file, 'r') as f:
            orders = json.load(f)
    except FileNotFoundError:
        orders = {}
    
    if Order_ID in orders:
        print(f"Order with ID {Order_ID} already exists.")
    orders[Order_ID] = order
    with open(order_json_file, 'w') as f:
        json.dump(orders, f, indent=4)
    return True
    

def Order_History(order_json_file,Name,details):
    '''Append the order information into details list'''
    try:
        with open(order_json_file, 'r') as f:
            orders = json.load(f)
    except FileNotFoundError:
        orders = {}
    for order_ID, order in orders.items():
        if order['ordered_by'] == Name:
            details.append(order)
    if len(details)>0:
        return True
    else:
        return False
    

